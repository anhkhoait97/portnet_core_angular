// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortNet.Data.Migrations.INFPortObjectDbContext;

namespace PortNet.Data.Migrations.INFPortObjectDbContext
{
    [DbContext(typeof(INFPortObjectDbContext))]
    [Migration("20201222021039_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPort.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("City")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("District")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HandPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Part")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sale")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("Ward")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Cmlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IndexR")
                        .HasColumnName("indexR")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("1: Tình Trạng, 2: ServiceIT");

                    b.HasKey("Id");

                    b.ToTable("CMList");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tacit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<long?>("BuildingId")
                        .HasColumnName("BuildingID")
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Mã công trình")
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("EndName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("EndNameDistrict")
                        .HasColumnName("EndName_District")
                        .HasColumnType("int");

                    b.Property<int?>("EndNameWard")
                        .HasColumnName("EndName_Ward")
                        .HasColumnType("int");

                    b.Property<int?>("FinishQuarter")
                        .HasColumnName("Finish_Quarter")
                        .HasColumnType("int");

                    b.Property<int?>("FinishYear")
                        .HasColumnName("Finish_Year")
                        .HasColumnType("int");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasComment("< 2: cho upload file, =2 không thể upload file");

                    b.Property<string>("Infmaintail")
                        .HasColumnName("INFMaintail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("InvestCosts")
                        .HasColumnName("Invest_Costs")
                        .HasColumnType("varchar(10)")
                        .HasComment("Chi phí đầu tư (trieu), duoc nhap so thap phân")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("InvestId")
                        .HasColumnName("InvestID")
                        .HasColumnType("int");

                    b.Property<string>("IsFile")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Có file, không có file")
                        .HasMaxLength(10);

                    b.Property<string>("Length")
                        .HasColumnType("varchar(10)")
                        .HasComment("Chiều dài (m), duoc nhap so thap phân")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LinkDesign")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerUnitId")
                        .HasColumnName("ManagerUnitID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasComment("tên công trình")
                        .HasMaxLength(250);

                    b.Property<string>("Plans")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RentalCost")
                        .HasColumnName("Rental_Cost")
                        .HasColumnType("varchar(10)")
                        .HasComment("Chi phí thuê hàng tháng (triệu), duoc nhap so thap phân")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("StartName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("StartNameDistrict")
                        .HasColumnName("StartName_District")
                        .HasColumnType("int");

                    b.Property<int?>("StartNameWard")
                        .HasColumnName("StartName_Ward")
                        .HasColumnType("int");

                    b.Property<int?>("StartUpQuarter")
                        .HasColumnName("StartUp_Quarter")
                        .HasColumnType("int");

                    b.Property<int?>("StartUpYear")
                        .HasColumnName("StartUp_Year")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(350)")
                        .HasComment("Tuyến đường")
                        .HasMaxLength(350);

                    b.Property<int?>("StreetDistrict")
                        .HasColumnName("Street_District")
                        .HasColumnType("int");

                    b.Property<int?>("StreetWard")
                        .HasColumnName("Street_Ward")
                        .HasColumnType("int");

                    b.Property<int?>("TypeBuilding")
                        .HasColumnType("int")
                        .HasComment("1: Thuoc building, 0: Khong thuoc building");

                    b.Property<int?>("TypeTacit")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .HasName("IX_Tacit_9");

                    b.HasIndex("Code")
                        .HasName("IX_Tacit_3");

                    b.HasIndex("LocationId")
                        .HasName("IX_Tacit");

                    b.HasIndex("Name")
                        .HasName("IX_Tacit_2");

                    b.HasIndex("Plans")
                        .HasName("IX_Tacit_4");

                    b.HasIndex("Street")
                        .HasName("IX_Tacit_5");

                    b.HasIndex("TypeBuilding")
                        .HasName("IX_Tacit_8");

                    b.HasIndex("LocationId", "BranchId")
                        .HasName("IX_Tacit_1");

                    b.HasIndex("LocationId", "Code")
                        .HasName("IX_Tacit_7");

                    b.HasIndex("LocationId", "Name")
                        .HasName("IX_Tacit_6");

                    b.HasIndex("LocationId", "BranchId", "TypeBuilding", "BuildingId")
                        .HasName("IX_Tacit_10");

                    b.ToTable("Tacit");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TacitFile", b =>
                {
                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.ToTable("TacitFile");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TacitLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(350)")
                        .HasMaxLength(350);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("IX_TacitLog_1");

                    b.HasIndex("FileName")
                        .HasName("IX_TacitLog_3");

                    b.HasIndex("Name")
                        .HasName("IX_TacitLog_2");

                    b.HasIndex("TacitId")
                        .HasName("IX_TacitLog");

                    b.ToTable("TacitLog");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tarray", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Parent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("ValuesId")
                        .HasColumnName("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Parent")
                        .HasName("IX_TArray_3");

                    b.HasIndex("Type")
                        .HasName("IX_TArray_1");

                    b.HasIndex("ValuesId")
                        .HasName("IX_TArray");

                    b.HasIndex("ValuesId", "Type")
                        .HasName("IX_TArray_2");

                    b.ToTable("TArray");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tbellows", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityLid")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityTube")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUse")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(350)")
                        .HasMaxLength(350);

                    b.Property<string>("DifferentName")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Tên thay thế của bể")
                        .HasMaxLength(50);

                    b.Property<int?>("District")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnName("MaterialID")
                        .HasColumnType("int")
                        .HasComment("Chất liệu");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasComment("Mã bể")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OwnedId")
                        .HasColumnName("OwnedID")
                        .HasColumnType("int");

                    b.Property<string>("Plans")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("PointConnectId")
                        .HasColumnName("PointConnectID")
                        .HasColumnType("bigint");

                    b.Property<string>("PointConnectName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ShapeBellowsId")
                        .HasColumnName("ShapeBellowsID")
                        .HasColumnType("int");

                    b.Property<int?>("ShapeLidId")
                        .HasColumnName("ShapeLidID")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("varchar(50)")
                        .HasComment("Kích thước")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TypeConnect")
                        .HasColumnType("int")
                        .HasComment("1: Công trình, 2: Bể , 3 Ganivo, 4 Ngoi");

                    b.Property<int?>("TypeDevice")
                        .HasColumnType("int")
                        .HasComment("1: Bể rẽ nhánh, 2: Bể thẳng, 3: Bể đầu tiên");

                    b.Property<int?>("TypeObject")
                        .HasColumnType("int")
                        .HasComment("1: Bình thường, 2: Ảo, 3: Trung gian");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ward")
                        .HasColumnType("int");

                    b.Property<string>("Xcoordinate")
                        .HasColumnName("XCoordinate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ycoordinate")
                        .HasColumnName("YCoordinate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TBellows_1");

                    b.HasIndex("LocationId")
                        .HasName("IX_TBellows");

                    b.HasIndex("Name")
                        .HasName("IX_TBellows_2");

                    b.HasIndex("Plans")
                        .HasName("IX_TBellows_5");

                    b.HasIndex("TypeConnect")
                        .HasName("IX_TBellows_3");

                    b.HasIndex("LocationId", "BranchId", "Name", "TypeConnect")
                        .HasName("IX_TBellows_4");

                    b.HasIndex("Name", "TacitId", "LocationId", "BranchId")
                        .HasName("_dta_index_TBellows_11_1312723729__K5_K3_K4_2");

                    b.ToTable("TBellows");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TbellowsFace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BellowsId")
                        .HasColumnName("BellowsID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Nhập ghi chú mặt đó đang hướng về vị trí nào")
                        .HasMaxLength(250);

                    b.Property<int?>("FaceId")
                        .HasColumnName("FaceID")
                        .HasColumnType("int");

                    b.Property<string>("NameFace")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Măt của bể")
                        .HasMaxLength(10);

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasComment("Kích thước ma trận mỗi mặt");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("2: Bellow, 3: Ganivo");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BellowsId")
                        .HasName("IX_TBellowsFace");

                    b.HasIndex("NameFace")
                        .HasName("IX_TBellowsFace_1");

                    b.ToTable("TBellowsFace");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tcontract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Appendices")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phu luc hop dong")
                        .HasMaxLength(50);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CommandEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CommandStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContractName")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CyclePay")
                        .HasColumnName("Cycle_Pay")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("DocumentId")
                        .HasColumnName("DocumentID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày kết thúc");

                    b.Property<string>("Infmaintain")
                        .HasColumnName("INFMaintain")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsFile")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("IsPi")
                        .HasColumnType("int");

                    b.Property<int?>("IsSpecial")
                        .HasColumnType("int")
                        .HasComment("0: Hop dong bình thường, 1: Hợp đồng đặc biệt");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("NameBranch")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("NumberPay")
                        .HasColumnName("Number_Pay")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnName("PartnerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày ký HD");

                    b.Property<int?>("StatusContract")
                        .HasColumnType("int");

                    b.Property<int?>("StatusPay")
                        .HasColumnType("int")
                        .HasComment("Tình trạng thanh toán");

                    b.Property<string>("SumValuesReal")
                        .HasColumnName("Sum_Values_Real")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("SumValuesRefer")
                        .HasColumnName("Sum_Values_Refer")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("Loại HD");

                    b.Property<int?>("TypeContract")
                        .HasColumnType("int")
                        .HasComment("0: HĐ Cho Thuê;  1: HĐ Đi Thuê");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Vat")
                        .HasColumnName("VAT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TContract_2");

                    b.HasIndex("ContractName")
                        .HasName("IX_TContract");

                    b.HasIndex("LocationId")
                        .HasName("IX_TContract_1");

                    b.HasIndex("SignDate")
                        .HasName("IX_TContract_4");

                    b.HasIndex("TacitId")
                        .HasName("IX_TContract_3");

                    b.HasIndex("Type")
                        .HasName("IX_TContract_5");

                    b.ToTable("TContract");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TcontractAppendices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CyclePay")
                        .HasColumnName("Cycle_Pay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("NumberPay")
                        .HasColumnName("Number_Pay")
                        .HasColumnType("int");

                    b.Property<long?>("PartnerId")
                        .HasColumnName("PartnerID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusContract")
                        .HasColumnType("int");

                    b.Property<int>("StatusPay")
                        .HasColumnType("int")
                        .HasComment("1: Chưa thanh toán, 2: Đã thanh toán");

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("TotalReal")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("IX_TContractAppendices_2");

                    b.HasIndex("PartnerId")
                        .HasName("IX_TContractAppendices_1");

                    b.HasIndex("TcontractId")
                        .HasName("IX_TContractAppendices");

                    b.HasIndex("Name", "TcontractId")
                        .HasName("IX_TContractAppendices_3");

                    b.ToTable("TContractAppendices");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TcontractDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeTacit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CodeTacit")
                        .HasName("IX_TContractDetail_2");

                    b.HasIndex("TacitId")
                        .HasName("IX_TContractDetail_1");

                    b.HasIndex("TcontractId")
                        .HasName("IX_TContractDetail");

                    b.HasIndex("TacitId", "TcontractId")
                        .HasName("IX_TContractDetail_3");

                    b.ToTable("TContractDetail");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TcontractExtension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Extension")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EndDate")
                        .HasName("IX_TContractExtension_3");

                    b.HasIndex("Extension")
                        .HasName("IX_TContractExtension_1");

                    b.HasIndex("SignDate")
                        .HasName("IX_TContractExtension_2");

                    b.HasIndex("TcontractId")
                        .HasName("IX_TContractExtension");

                    b.ToTable("TContractExtension");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TcontractFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .HasName("IX_TContractFile_4");

                    b.HasIndex("FileName")
                        .HasName("IX_TContractFile_1");

                    b.HasIndex("LinkFile")
                        .HasName("IX_TContractFile_3");

                    b.HasIndex("TcontractId")
                        .HasName("IX_TContractFile");

                    b.HasIndex("Type")
                        .HasName("IX_TContractFile_2");

                    b.ToTable("TContractFile");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TcontractHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Appendices")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phu luc hop dong")
                        .HasMaxLength(50);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("ContractName")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CyclePay")
                        .HasColumnName("Cycle_Pay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("DocumentId")
                        .HasColumnName("DocumentID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày kết thúc");

                    b.Property<int?>("HandleType")
                        .HasColumnType("int");

                    b.Property<string>("IsFile")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("IsPi")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("NameBranch")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("NumberPay")
                        .HasColumnName("Number_Pay")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnName("PartnerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày ký HD");

                    b.Property<int?>("StatusContract")
                        .HasColumnType("int");

                    b.Property<int?>("StatusPay")
                        .HasColumnType("int")
                        .HasComment("Tình trạng thanh toán");

                    b.Property<string>("SumValuesReal")
                        .HasColumnName("Sum_Values_Real")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("SumValuesRefer")
                        .HasColumnName("Sum_Values_Refer")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("TacitName")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("Loại HD");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Vat")
                        .HasColumnName("VAT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TContractHistory_2");

                    b.HasIndex("ContractName")
                        .HasName("IX_TContractHistory");

                    b.HasIndex("Date")
                        .HasName("IX_TContractHistory_7");

                    b.HasIndex("LocationId")
                        .HasName("IX_TContractHistory_1");

                    b.HasIndex("SignDate")
                        .HasName("IX_TContractHistory_4");

                    b.HasIndex("TacitName")
                        .HasName("IX_TContractHistory_3");

                    b.HasIndex("TcontractId")
                        .HasName("IX_TContractHistory_6");

                    b.HasIndex("Type")
                        .HasName("IX_TContractHistory_5");

                    b.ToTable("TContractHistory");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tdocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int")
                        .HasComment("0: Là thuộc tất cả CN của vùng miền");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Ma cong văn")
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Extension")
                        .HasColumnType("int")
                        .HasComment("So lần gia han");

                    b.Property<string>("IsFile")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasComment("Danh muc don gia")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NameBranch")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("1: Bình thường, 2: Đóng băng");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TDocument_1");

                    b.HasIndex("Code")
                        .HasName("IX_TDocument_4");

                    b.HasIndex("IsFile")
                        .HasName("IX_TDocument_7");

                    b.HasIndex("LocationId")
                        .HasName("IX_TDocument");

                    b.HasIndex("Name")
                        .HasName("IX_TDocument_3");

                    b.HasIndex("StartDate")
                        .HasName("IX_TDocument_6");

                    b.HasIndex("Status")
                        .HasName("IX_TDocument_5");

                    b.HasIndex("LocationId", "BranchId")
                        .HasName("IX_TDocument_2");

                    b.ToTable("TDocument");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TdocumentFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("TdocumentId")
                        .HasColumnName("TDocumentID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .HasName("IX_TDocumentFile_1");

                    b.HasIndex("LinkFile")
                        .HasName("IX_TDocumentFile_2");

                    b.HasIndex("TdocumentId")
                        .HasName("IX_TDocumentFile");

                    b.HasIndex("TdocumentId", "FileName", "LinkFile")
                        .HasName("IX_TDocumentFile_3");

                    b.ToTable("TDocumentFile");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tganivo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityTube")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUse")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DifferentName")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Tên thay thế của ganivo")
                        .HasMaxLength(50);

                    b.Property<int?>("District")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnName("MaterialID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OwnedId")
                        .HasColumnName("OwnedID")
                        .HasColumnType("int");

                    b.Property<string>("Plans")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("PointConnectId")
                        .HasColumnName("PointConnectID")
                        .HasColumnType("bigint");

                    b.Property<string>("PointConnectName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ShapeGanivoId")
                        .HasColumnName("ShapeGanivoID")
                        .HasColumnType("int");

                    b.Property<int?>("ShapeLidId")
                        .HasColumnName("ShapeLidID")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TypeConnect")
                        .HasColumnType("int")
                        .HasComment("2:  Bể,3 : Ganivo,4 Ngoi");

                    b.Property<int?>("TypeDevice")
                        .HasColumnType("int")
                        .HasComment("1: Ganivo rẽ nhánh, 2: Ganivo thẳng, 3: Ganivo đầu tiên");

                    b.Property<int?>("TypeObject")
                        .HasColumnType("int")
                        .HasComment("1: Bình thường, 2: Ảo, 3: Trung gian");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ward")
                        .HasColumnType("int");

                    b.Property<string>("Xcoordinate")
                        .HasColumnName("XCoordinate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ycoordinate")
                        .HasColumnName("YCoordinate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TGanivo_1");

                    b.HasIndex("LocationId")
                        .HasName("IX_TGanivo");

                    b.HasIndex("Name")
                        .HasName("IX_TGanivo_2");

                    b.HasIndex("TypeConnect")
                        .HasName("IX_TGanivo_3");

                    b.HasIndex("LocationId", "BranchId")
                        .HasName("IX_TGanivo_4");

                    b.HasIndex("Name", "LocationId", "BranchId", "Id", "TacitId")
                        .HasName("_dta_index_TGanivo_11_1344723843__K3_K4_K1_K5_2");

                    b.ToTable("TGanivo");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("1 : Hình dạng bể , 2 : Hình dạng nấp đang , 3 : Chất liệu , 4 : Tình trạng");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("IX_TTypeList_1");

                    b.HasIndex("Type")
                        .HasName("IX_TTypeList");

                    b.ToTable("TList");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<long?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("PartnerId")
                        .HasColumnName("PartnerID")
                        .HasColumnType("int");

                    b.Property<long?>("Type")
                        .HasColumnType("bigint")
                        .HasComment("1: MailTo | 2: MailCC");

                    b.Property<long?>("TypeMail")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TMail_2");

                    b.HasIndex("LocationId")
                        .HasName("IX_TMail_3");

                    b.HasIndex("Type")
                        .HasName("IX_TMail_1");

                    b.HasIndex("TypeMail")
                        .HasName("IX_TMail");

                    b.HasIndex("LocationId", "BranchId", "Type", "TypeMail")
                        .HasName("IX_TMail_4");

                    b.ToTable("TMail");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TmanuaBillding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CableLength")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CableName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Capacity")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("ContractId")
                        .HasColumnName("ContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EndName")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Formality")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameObject")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("NameTacit")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OdccableType")
                        .HasColumnName("ODCCableType")
                        .HasColumnType("varchar(8000)")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Price")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TacitCode")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TypeCable")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .HasName("idx_contractID");

                    b.ToTable("TManuaBillding");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TnumberPay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AppendicesId")
                        .HasColumnName("AppendicesID")
                        .HasColumnType("bigint");

                    b.Property<string>("AppendicesName")
                        .HasColumnName("Appendices_Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateConfim")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberPay")
                        .HasColumnName("Number_Pay")
                        .HasColumnType("int")
                        .HasComment("Số đợt thanh toan theo chu kỳ");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày thanh toán");

                    b.Property<int?>("StatusNumber")
                        .HasColumnType("int");

                    b.Property<string>("StatusString")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserConfim")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PayDate")
                        .HasName("IX_TNumberPay_2");

                    b.HasIndex("TcontractId")
                        .HasName("IX_TNumberPay");

                    b.HasIndex("TcontractId", "NumberPay", "PayDate")
                        .HasName("IX_TNumberPay_1");

                    b.ToTable("TNumberPay");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TnumberPayHistory", b =>
                {
                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("NumberPayId")
                        .HasColumnName("NumberPayID")
                        .HasColumnType("bigint");

                    b.Property<int?>("NumberType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusString")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("TcontractId")
                        .HasColumnName("TContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.ToTable("TNumberPayHistory");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tpartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("EmailKey1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailKey2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailManager")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FullNameKey1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FullNameKey2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FullNameManager")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("OldId")
                        .HasColumnName("OldID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneKey1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneKey2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneManager")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PositionKey1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PositionKey2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PositionManager")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("TPartner");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TpipePlug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUse")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("District")
                        .HasColumnType("int");

                    b.Property<int?>("EndBranchId")
                        .HasColumnName("EndBranchID")
                        .HasColumnType("int");

                    b.Property<long?>("EndTacitId")
                        .HasColumnName("EndTacitID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Fulcrum")
                        .HasColumnType("int");

                    b.Property<string>("Length")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OwnedId")
                        .HasColumnName("OwnedID")
                        .HasColumnType("int");

                    b.Property<string>("Plans")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PopName")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("StartConnectType")
                        .HasColumnType("int")
                        .HasComment("2:Bể, 3 Ganivo, 4 Ngoi");

                    b.Property<long?>("StartDeviceId")
                        .HasColumnName("StartDeviceID")
                        .HasColumnType("bigint");

                    b.Property<string>("StartDeviceName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StartFaceId")
                        .HasColumnName("StartFaceID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("TypeCount")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ward")
                        .HasColumnType("int");

                    b.Property<string>("Xcoordinate")
                        .HasColumnName("XCoordinate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ycoordinate")
                        .HasColumnName("YCoordinate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TPipePlug_1");

                    b.HasIndex("LocationId")
                        .HasName("IX_TPipePlug");

                    b.HasIndex("Name")
                        .HasName("IX_TPipePlug_3");

                    b.HasIndex("StartDeviceId")
                        .HasName("IX_TPipePlug_4");

                    b.HasIndex("TacitId")
                        .HasName("IX_TPipePlug_2");

                    b.HasIndex("Length", "Id")
                        .HasName("_dta_index_TPipePlug_11_1408724071__K1_11");

                    b.HasIndex("Name", "Length", "TacitId", "LocationId", "BranchId", "Id")
                        .HasName("_dta_index_TPipePlug_11_1408724071__K5_K3_K4_K1_2_11");

                    b.HasIndex("TacitId", "LocationId", "BranchId", "Id", "OwnedId", "District", "Ward", "StartDeviceName", "Length", "Plans", "Street", "DateUse")
                        .HasName("_dta_index_TPipePlug_11_1408724071__K5_K3_K4_K1_K13_K17_K18_K9_K11_K6_K16_K20");

                    b.ToTable("TPipePlug");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Tprice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Diameter")
                        .HasColumnType("varchar(50)")
                        .HasComment("Đường kính")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FormalityRent")
                        .HasColumnName("Formality_Rent")
                        .HasColumnType("int")
                        .HasComment("Hình thức thuê.  ( 1: Thuê full ống / 2: Thuê nguyên hầm / 3:Thuê theo cáp/ 4:Thuê ống ngoi toàn tuyến)");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NameBranch")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PenaltPrice")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Position")
                        .HasColumnType("int")
                        .HasComment("Vị trí");

                    b.Property<string>("Price")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Size")
                        .HasColumnType("varchar(50)")
                        .HasComment("Kich thước")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("TdocumentId")
                        .HasColumnName("TDocumentID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("Loại hình: ");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TPrice_1");

                    b.HasIndex("FormalityRent")
                        .HasName("IX_TPrice_4");

                    b.HasIndex("LocationId")
                        .HasName("IX_TPrice");

                    b.HasIndex("Size")
                        .HasName("IX_TPrice_5");

                    b.HasIndex("TdocumentId")
                        .HasName("IX_TPrice_2");

                    b.HasIndex("Type")
                        .HasName("IX_TPrice_3");

                    b.HasIndex("LocationId", "BranchId")
                        .HasName("IX_TPrice_6");

                    b.HasIndex("LocationId", "BranchId", "TdocumentId")
                        .HasName("IX_TPrice_7");

                    b.ToTable("TPrice");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TrouteCable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BranchCable")
                        .HasColumnType("bigint");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<long?>("CableId")
                        .HasColumnName("CableID")
                        .HasColumnType("bigint");

                    b.Property<string>("CableLength")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CableName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<long?>("ContractId")
                        .HasColumnName("ContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUse")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("DeviceId")
                        .HasColumnName("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Direction")
                        .HasColumnType("int")
                        .HasComment("1: chiều xuôi (đầu -> cuối) , 2:chiều ngược (cuối -> đầu)");

                    b.Property<string>("EndName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FullPiSize")
                        .HasColumnType("int")
                        .HasComment("Đường kính lấy từ TList(Type =7)");

                    b.Property<long?>("LocationCable")
                        .HasColumnType("bigint");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("NameObject")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OdccableType")
                        .HasColumnName("ODCCableType")
                        .HasColumnType("varchar(8000)")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("PartnerNameId")
                        .HasColumnName("PartnerNameID")
                        .HasColumnType("int");

                    b.Property<int?>("PiFullFlag")
                        .HasColumnType("int")
                        .HasComment("1: FullPi, 0: Cáp");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<string>("TacitName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("1: FTEL, 2: Đối tác");

                    b.Property<int?>("TypeCable")
                        .HasColumnType("int")
                        .HasComment("1: Đồng, 2: Quang, 3: Đồng trục");

                    b.Property<int?>("TypeCount")
                        .HasColumnType("int")
                        .HasComment("0 : Bình thường, 1: Phạt");

                    b.Property<int?>("TypeDevice")
                        .HasColumnType("int")
                        .HasComment("1: Pop, 2: Ring");

                    b.Property<int?>("TypeObject")
                        .HasColumnType("int")
                        .HasComment("1: Bể, 2: Ganivo");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TRouteCable_2");

                    b.HasIndex("DeviceId")
                        .HasName("IX_TRouteCable_6");

                    b.HasIndex("LocationId")
                        .HasName("IX_TRouteCable_1");

                    b.HasIndex("TacitId")
                        .HasName("IX_TRouteCable_4");

                    b.HasIndex("Type")
                        .HasName("IX_TRouteCable");

                    b.HasIndex("TypeCable")
                        .HasName("IX_TRouteCable_7");

                    b.HasIndex("TypeDevice")
                        .HasName("IX_TRouteCable_3");

                    b.HasIndex("TypeObject")
                        .HasName("IX_TRouteCable_5");

                    b.HasIndex("Type", "TacitId", "Id", "CableName")
                        .HasName("_dta_index_TRouteCable_11_1440724185__K4_K14_K1_K11");

                    b.HasIndex("LocationId", "Type", "TacitId", "BranchId", "Id", "CableName")
                        .HasName("_dta_index_TRouteCable_11_1440724185__K2_K4_K14_K3_K1_K11");

                    b.HasIndex("Type", "PartnerNameId", "OdccableType", "CableName", "LocationId", "BranchId")
                        .HasName("_dta_index_TRouteCable_11_1440724185__K11_K2_K3_4_5_19");

                    b.HasIndex("Id", "Type", "PartnerNameId", "TypeCable", "Capacity", "LocationId", "BranchId", "CableName")
                        .HasName("_dta_index_TRouteCable_11_1440724185__K2_K3_K11_1_4_5_6_7");

                    b.HasIndex("TypeCable", "CableName", "LocationId", "Id", "PartnerNameId", "BranchId", "Type", "Capacity")
                        .HasName("_dta_index_TRouteCable_11_1440724185__K11_K2_K1_K5_K3_K4_K7_6");

                    b.HasIndex("CreateDate", "CreateBy", "TypeCable", "NameObject", "EndName", "OdccableType", "TacitId", "LocationId", "Type", "BranchId", "Id", "CableName", "Capacity", "PartnerNameId")
                        .HasName("_dta_index_TRouteCable_11_1440724185__K14_K2_K4_K3_K1_K11_K7_K5_6_17_18_19_22_23");

                    b.ToTable("TRouteCable");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TrouteCableDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CableId")
                        .HasColumnName("CableID")
                        .HasColumnType("bigint");

                    b.Property<string>("CableName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("ContractId")
                        .HasColumnName("ContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Length")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PiFullFlag")
                        .HasColumnType("int");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("TubeName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CableName")
                        .HasName("IX_TRouteCableDetail");

                    b.HasIndex("TubeName")
                        .HasName("IX_TRouteCableDetail_1");

                    b.HasIndex("CableName", "TubeName")
                        .HasName("IX_TRouteCableDetail_2");

                    b.HasIndex("TubeName", "CableName")
                        .HasName("_dta_index_TRouteCableDetail_11_1472724299__K3_K2");

                    b.HasIndex("TubeName", "Id", "CableName")
                        .HasName("_dta_index_TRouteCableDetail_11_1472724299__K3_K1_K2");

                    b.ToTable("TRouteCableDetail");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TrouteCableHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<long?>("CableId")
                        .HasColumnName("CableID")
                        .HasColumnType("bigint");

                    b.Property<string>("CableLength")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CableName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<long?>("ContractId")
                        .HasColumnName("ContractID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("DeviceId")
                        .HasColumnName("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("EndName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("NameObject")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OdccableType")
                        .HasColumnName("ODCCableType")
                        .HasColumnType("varchar(8000)")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("PartnerNameId")
                        .HasColumnName("PartnerNameID")
                        .HasColumnType("int");

                    b.Property<int?>("PiFullFlag")
                        .HasColumnType("int");

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<string>("TacitName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("TrouteCableId")
                        .HasColumnName("TRouteCableID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("TypeCable")
                        .HasColumnType("int");

                    b.Property<int?>("TypeDevice")
                        .HasColumnType("int");

                    b.Property<int?>("TypeObject")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TRouteCableHistory_1");

                    b.HasIndex("CableName")
                        .HasName("IX_TRouteCableHistory_4");

                    b.HasIndex("LocationId")
                        .HasName("IX_TRouteCableHistory");

                    b.HasIndex("Type")
                        .HasName("IX_TRouteCableHistory_3");

                    b.HasIndex("TacitId", "TacitName")
                        .HasName("IX_TRouteCableHistory_5");

                    b.HasIndex("TypeDevice", "DeviceName")
                        .HasName("IX_TRouteCableHistory_2");

                    b.HasIndex("TypeObject", "NameObject")
                        .HasName("IX_TRouteCableHistory_6");

                    b.ToTable("TRouteCableHistory");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TrouteCableLink", b =>
                {
                    b.Property<long?>("BellowId")
                        .HasColumnName("BellowID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Custom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataArray")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasIndex("BellowId")
                        .HasName("idx_TRouteCableLink_BellowID");

                    b.HasIndex("Id")
                        .HasName("idx_TRouteCableLink_ID");

                    b.ToTable("TRouteCableLink");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.Ttube", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUse")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndBranchId")
                        .HasColumnName("EndBranchID")
                        .HasColumnType("int");

                    b.Property<int?>("EndConnectType")
                        .HasColumnType("int");

                    b.Property<long?>("EndDeviceId")
                        .HasColumnName("EndDeviceID")
                        .HasColumnType("bigint");

                    b.Property<string>("EndDeviceName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("EndFaceId")
                        .HasColumnName("EndFaceID")
                        .HasColumnType("int");

                    b.Property<long?>("EndTacitId")
                        .HasColumnName("EndTacitID")
                        .HasColumnType("bigint");

                    b.Property<string>("Length")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OwnedId")
                        .HasColumnName("OwnedID")
                        .HasColumnType("int");

                    b.Property<string>("Plans")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PopName")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("StartConnectType")
                        .HasColumnType("int");

                    b.Property<long?>("StartDeviceId")
                        .HasColumnName("StartDeviceID")
                        .HasColumnType("bigint");

                    b.Property<string>("StartDeviceName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StartFaceId")
                        .HasColumnName("StartFaceID")
                        .HasColumnType("int");

                    b.Property<long?>("TacitId")
                        .HasColumnName("TacitID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TubeType")
                        .HasColumnType("int")
                        .HasComment("1: Bình thường, 2: Ống bổ sung");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("1: Đơn công trình, 2: Liên công trình");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_TTube_1");

                    b.HasIndex("LocationId")
                        .HasName("IX_TTube");

                    b.HasIndex("Name")
                        .HasName("IX_TTube_2");

                    b.HasIndex("StartDeviceId")
                        .HasName("IX_TTube_4");

                    b.HasIndex("TacitId")
                        .HasName("IX_TTube_3");

                    b.HasIndex("Length", "Id")
                        .HasName("_dta_index_TTube_11_1504724413__K1_14");

                    b.HasIndex("LocationId", "BranchId", "TacitId")
                        .HasName("_dta_index_TTube_11_1504724413__K3_K4_K5");

                    b.HasIndex("Name", "Length", "TacitId", "LocationId", "BranchId")
                        .HasName("_dta_index_TTube_11_1504724413__K5_K3_K4_2_14");

                    b.HasIndex("TacitId", "LocationId", "BranchId", "Id", "OwnedId", "StartDeviceName", "EndDeviceName", "Length", "Plans", "DateUse")
                        .HasName("_dta_index_TTube_11_1504724413__K5_K3_K4_K1_K15_K9_K12_K14_K6_K16");

                    b.ToTable("TTube");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TtubeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnName("ColorID")
                        .HasColumnType("int");

                    b.Property<string>("CoordinatesXsectionEnd")
                        .HasColumnName("CoordinatesXSectionEnd")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("CoordinatesXsectionStart")
                        .HasColumnName("CoordinatesXSectionStart")
                        .HasColumnType("varchar(5)")
                        .HasComment("Tọa độ X điểm Pi trên mặt bể")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("CoordinatesYsectionEnd")
                        .HasColumnName("CoordinatesYSectionEnd")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("CoordinatesYsectionStart")
                        .HasColumnName("CoordinatesYSectionStart")
                        .HasColumnType("varchar(5)")
                        .HasComment("Tọa độ Y điểm Pi trên mặt bể")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("DeviceId")
                        .HasColumnName("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialId")
                        .HasColumnName("MaterialID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("PiFullFlag")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnName("SiteID")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("1: Đoạn ống, 2: Ống ngoi");

                    b.Property<int?>("TypeTube")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .HasName("IX_TTubeDetail");

                    b.HasIndex("Status")
                        .HasName("IX_TTubeDetail_2");

                    b.HasIndex("DeviceId", "Number")
                        .HasName("IX_TTubeDetail_1");

                    b.HasIndex("Name", "DeviceId", "Type")
                        .HasName("_dta_index_TTubeDetail_11_1536724527__K2_3_4");

                    b.HasIndex("DeviceId", "Id", "Type", "MaterialId", "ColorId", "TypeTube", "SiteId", "Name", "Description", "CreateDate", "CreateBy")
                        .HasName("_dta_index_TTubeDetail_11_1536724527__K4_K1_K2_K10_K11_K8_K7_K3_K12_K13_K14");

                    b.ToTable("TTubeDetail");
                });

            modelBuilder.Entity("PortNet.Model.Entities.INFPortObject.TypeMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Approved")
                        .HasColumnType("int")
                        .HasComment("0: Chưa dùng.1 : Là dùng");

                    b.Property<string>("BodyFirst")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BodyFtn")
                        .HasColumnName("BodyFTN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyFts")
                        .HasColumnName("BodyFTS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RuleTime")
                        .HasColumnType("int")
                        .HasComment("1: Tháng. 2: Tuần, 3: Ngày");

                    b.Property<string>("TitleMailEnd")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TitleMailFirst")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("TypeCondition")
                        .HasColumnType("int")
                        .HasComment("Định kỳ/ Accion");

                    b.Property<int?>("ValuesTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeCondition", "RuleTime", "Approved")
                        .HasName("IX_TypeMail");

                    b.ToTable("TypeMail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PortNet.Model.Entities.INFPort.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PortNet.Model.Entities.INFPort.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortNet.Model.Entities.INFPort.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PortNet.Model.Entities.INFPort.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
